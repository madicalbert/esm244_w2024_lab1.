---
title: "Lab 1"
author: "Madi Calbert"
format: 
  html:
    code-fold: true
    toc: true
execute: 
  echo: true
  message: false
  warning: false
editor: visual
---

command, option, "i" creates new chunk of code
```{r setup}
library(tidyverse)
library(here)
library(sf)
library(tmap)
```

Use read_csv istead of read.csv. It is better. 
```{r load data}
sfo_trees_df <- read_csv(here("data", "sfo_trees", "sfo_trees.csv")) %>% 
  janitor::clean_names()
```
#Part 1: data exploration and wrangling review 

## Example 1: 

Find counts of observation by 'legal status', then select the statuses with the five highest tree counts. 
### Pseudocode 

grouping by legal status 
each observation into its own variable column, so counts are separate 
summarize by tree count 

```{r}
sfo_trees_df %>% 
  group_by(legal_status) %>% 
  summarize(tree_count = n())

top_5_status <- sfo_trees_df %>% 
  filter(!is.na(legal_status)) %>% 
  group_by(legal_status) %>% 
  summarize(tree_count = n()) %>% 
  ungroup() %>% 
  slice_max(tree_count, n = 5)
```

Make a ggplot of the top 5 observations from above: 
```{r}
top_5_plot <- ggplot(data = top_5_status, 
                     aes(y = fct_reorder(legal_status, tree_count),
                         x = tree_count))+
                       geom_col(fill = "pink")+
  labs(y = 'Legal Status', x = 'Tree Count')+
  theme_minimal()
top_5_plot
```

## Example 2

Only keep observation where legal status is "Permitted Site" and caretaker is "MTA" or "DPW". Store as "permitted_mta_dpw"

### Pseudocode

filter to keep the observation with Permitted Site, and also for the caretaker 

### Functional code

Use %in% instead of == for the MTA and DPW or else it will consider the order of the MTA and DPW. 
```{r}
permitted_mpa_dpw <- sfo_trees_df %>% 
  filter(legal_status == 'Permitted Site' & caretaker %in% c('MTA', 'DPW'))
```


## Example 3

Only keep observations of oak and pine trees
then only keep columns "species", "legal status", "plant date", and "latitude", and "longitude" 
For each tree, note whether it's an oak or a pine!

### Pseudocode

Filter oak and pine tree, but the species are complicated! Find by a search string? 
select columns as needed
mutate a new column for oak vs pine 

### Functional code 

```{r}
oak_pine_df <- sfo_trees_df %>% 
  filter(str_detect(species, "Oak") | str_detect(species, "Pine")) %>% 
  select(species, legal_status, plant_date, latitude, longitude) %>% 
  mutate(type = ifelse(str_detect(species, 'Oak'), 'oak', 'pine'))
```

```{r}
ggplot(data = oak_pine_df, aes(x = longitude, y = latitude, color = type)) +
  geom_point() +
  theme_minimal() +
  theme(axis.title = element_blank()) +
  labs(color = 'Tree Type',
       caption = 'Location of oaks and pines in San Francisco')
```

## Example 4

load a list of ca native species 

```{r}
ca_native_df <- read_csv(here('data/sfo_trees/ca_native_spp.csv'))
```
How can we compare the California native species to those in our SF trees data? Add a column notes whether each tree is a CA native or not, and save as sfo_trees_native (include species info, legal status, plant date, and location). We'll need the common and scientific name separated!

```{r}
sfo_tree_native <- sfo_trees_df %>% 
  separate(species, into = c('spp_sci', 'spp_commmon'), sep = ' :: ') %>% 
  select(starts_with('spp'), 'plant_date', 'legal_status', 'longitude', 'latitude') %>% 
  mutate(ca_native = (spp_sci %in% ca_native_df$scientific_name)) 

sfo_native_status <- sfo_tree_native %>% 
  group_by(legal_status, ca_native) %>% 
  summarize(n_trees = n(),
            n_species = n_distinct(spp_sci))
```




















